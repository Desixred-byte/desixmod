'use strict';

const request = require('request');

const getUrl = (symbol, extension) => {
    if (extension === undefined || extension === '') {
        extension = '';
    } else {
        extension = `.${extension}`;
    }
    let url = `https://query1.finance.yahoo.com/v10/finance/\
quoteSummary/${symbol}${extension}?&modules=financialData`;
    return url;
};

const getJson = url =>
    new Promise((resolve, reject) => {
        let requestOpts = {
            url: url,
            json: true,
            headers: { 'User-agent': 'request' },
        };

        request.get(requestOpts, (err, res, data) => {
            if (err) {
                reject(err);
            } else if (res.statusCode !== 200) {
                reject(res.statusCode);
            } else {
                resolve(data);
            }
        });
    });

const getData = (symbol, extension) =>
    new Promise((resolve, reject) => {
        let url = getUrl(symbol, extension);
        getJson(url)
            .then(data => {
              const dt = data.quoteSummary.result[0].financialData 
                resolve({
                    symbol,
                    data: "Stock Data",
                 currentPrice: dt.currentPrice.raw, targetHighPrice : dt.targetHighPrice.raw, targetLowPrice : dt.targetLowPrice.raw, targetMeanPrice : dt.targetMeanPrice.raw, targetMedianPrice: dt.targetMedianPrice.raw, recommendationMean : dt.recommendationMean.raw, recommendationKey : dt.recommendationKey, numberofAnalystOpinions : dt.numberOfAnalystOpinions.raw, totalCash: dt.totalCash.raw, totalCashFormat: dt.totalCash.fmt,totalCashPerShare : dt.totalCashPerShare.raw, ebitda : dt.ebitda.raw, ebitdaFormat : dt.ebitda.fmt, totalDebt : dt.totalDebt.raw, quickRatio: dt.quickRatio.raw, currentRatio: dt.currentRatio.raw, totalRevenue : dt.totalRevenue.raw, totalRevenueFormat : dt.totalRevenue.fmt, debtToEquity : dt.debtToEquity.raw, revenuePerShare : dt.revenuePerShare.raw, returnOnAssets : dt.returnOnAssets.raw, returnOnAssetsFormat : dt.returnOnAssets.fmt , returnOnEquity : dt.returnOnEquity.raw, returnOnEquityFormat : dt.returnOnEquity.fmt, grossProfits : dt.grossProfits.raw, grossProfitsFormat : dt.grossProfits.fmt, freeCashFlow : dt.freeCashflow.raw, freeCashFlowFormat : dt.freeCashflow.fmt, operatingCashFlow : dt.operatingCashflow.raw, operatingCashFlowFormat : dt.operatingCashflow.fmt, earningsGrowth : dt.earningsGrowth.raw, revenueGroth : dt.revenueGrowth.raw, revenueGrothFormat : dt.revenueGrowth.fmt, grossMargins : dt.grossMargins.raw, grossMarginsFormat : dt.grossMargins.fmt, ebitdaMargins : dt.ebitdaMargins.raw, ebitdaMarginsFormat : dt.ebitdaMargins.fmt, operatingMargins : dt.operatingMargins.raw, profitMargins : dt.profitMargins.raw, profitMarginsFormat : dt.profitMargins.fmt, financialCurrency : dt.financialCurrency,
                });
            })
            .catch(err => {
                reject(err);
            });
    });

module.exports = getData