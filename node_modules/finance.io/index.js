'use strict';

exports.test = function() {
  const stats = require('./tools/stats/lib')
  const color = require('./tools/color')
  stats.cpu()
  .then(data => console.log(data))
  .catch(error => console.error(error));
	return console.log(`${color.blue('Finance.io Test Function ....')}
 ${color.bold('Status : ')} ${color.green('Good')}`)


}


exports.get = function(string) {
  if (typeof string !== "string") throw new TypeError("Please Provide A String");
  const args = string
  const color = require('./tools/color')
  const axios = require('axios')
axios
            .get(
              `https://query1.finance.yahoo.com/v10/finance/quoteSummary/${args}?&modules=financialData`
            )
            .then(response => {
               const dt = response.data.quoteSummary.result[0].financialData
               const allData = {quote : args,  currentPrice: dt.currentPrice.raw, targetHighPrice : dt.targetHighPrice.raw, targetLowPrice : dt.targetLowPrice.raw, targetMeanPrice : dt.targetMeanPrice.raw, targetMedianPrice: dt.targetMedianPrice.raw, recommendationMean : dt.recommendationMean.raw, recommendationKey : dt.recommendationKey, numberofAnalystOpinions : dt.numberOfAnalystOpinions.raw, totalCash: dt.totalCash.raw, totalCashFormat: dt.totalCash.fmt,totalCashPerShare : dt.totalCashPerShare.raw, ebitda : dt.ebitda.raw, ebitdaFormat : dt.ebitda.fmt, totalDebt : dt.totalDebt.raw, quickRatio: dt.quickRatio.raw, currentRatio: dt.currentRatio.raw, totalRevenue : dt.totalRevenue.raw, totalRevenueFormat : dt.totalRevenue.fmt, debtToEquity : dt.debtToEquity.raw, revenuePerShare : dt.revenuePerShare.raw, returnOnAssets : dt.returnOnAssets.raw, returnOnAssetsFormat : dt.returnOnAssets.fmt , returnOnEquity : dt.returnOnEquity.raw, returnOnEquityFormat : dt.returnOnEquity.fmt, grossProfits : dt.grossProfits.raw, grossProfitsFormat : dt.grossProfits.fmt, freeCashFlow : dt.freeCashflow.raw, freeCashFlowFormat : dt.freeCashflow.fmt, operatingCashFlow : dt.operatingCashflow.raw, operatingCashFlowFormat : dt.operatingCashflow.fmt, earningsGrowth : dt.earningsGrowth.raw, revenueGroth : dt.revenueGrowth.raw, revenueGrothFormat : dt.revenueGrowth.fmt, grossMargins : dt.grossMargins.raw, grossMarginsFormat : dt.grossMargins.fmt, ebitdaMargins : dt.ebitdaMargins.raw, ebitdaMarginsFormat : dt.ebitdaMargins.fmt, operatingMargins : dt.operatingMargins.raw, profitMargins : dt.profitMargins.raw, profitMarginsFormat : dt.profitMargins.fmt, financialCurrency : dt.financialCurrency}
               const getData = allData;
             return console.log(allData);
            }).catch(err => {
             return console.log(err)
           })
};



exports.get.company = function(string) {
  if (typeof string !== "string") throw new TypeError("Please Provide A String");
  const args = string
  const axios = require('axios')
axios
            .get(
              `https://query1.finance.yahoo.com/v10/finance/quoteSummary/${args}?&modules=assetProfile`
            )
            .then(response => {
               const dt = response.data.quoteSummary.result[0].assetProfile
               const allData = {quote : args,  address1: dt.address1, city : dt.city, state : dt.state, zipCode : dt.zip, country: dt.country, contactNumber : dt.phone, website : dt.website, industry : dt.industry, sector: dt.sector, businessSummary : dt.longBusinessSummary, fullTimeEmployees : dt.fullTimeEmployees, headCompanyOfficers : dt.companyOfficers[0].name}
             return console.log(allData);

            }).catch(err => {
             console.log(err)
           })
};


exports.netSharePurchaseActivity = function(string) {
  if (typeof string !== "string") throw new TypeError("Please Provide a string!");
  const args = string
  const axios = require('axios')
axios
            .get(
              `https://query1.finance.yahoo.com/v10/finance/quoteSummary/${args}?&modules=netSharePurchaseActivity`
            )
            .then(response => {
               const dt = response.data.quoteSummary.result[0].netSharePurchaseActivity
               const allData = {quote : args,  buyInfoCount: dt.buyInfoCount.raw, buyInfoShares : dt.buyInfoShares.raw, buyPercentInsiderShares : dt.buyPercentInsiderShares.raw, sellInfoCount : dt.sellInfoCount.raw, sellInfoShares: dt.sellInfoShares.raw, netInfoCount : dt.netInfoCount.raw, netInfoShares : dt.netInfoShares.raw, netPercentInsiderShares: dt.netPercentInsiderShares.raw, totalInsiderShares : dt.totalInsiderShares.raw}
             return console.log(allData);

            }).catch(err => {
             return console.log(err)
           })
};



exports.get.financial = function(string) {
  if (typeof string !== "string") throw new TypeError("Please Provide a string!");
  const args = string
  const axios = require('axios')
axios
            .get(
              `https://query1.finance.yahoo.com/v7/finance/options/${args}`
            )
            .then(response => {
               const dt = response.data.optionChain.result[0].quote
               const allData = {quote : args,  fiftyTwoWeekRange: dt.fiftyTwoWeekRange, fiftyTwoWeekLow : dt.fiftyTwoWeekLow, fiftyTwoWeekHigh : dt.fiftyTwoWeekHigh, trailingPE : dt.trailingPE,   epsTrailingTwelveMonths : dt. epsTrailingTwelveMonths, epsForward : dt.epsForward, epsCurrentYear: dt.epsCurrentYear,  priceEpsCurrentYear : dt. priceEpsCurrentYear, sharesOutstanding : dt.sharesOutstanding,  bookValue : dt.bookValue, marketCap : dt.marketCap, forwardPE : dt.forwardPE, priceToBook : dt.priceToBook, fullExchangeName: dt.fullExchangeName}
             return console.log(allData);

            }).catch(err => {
             return console.log(err)
           })
};


exports.getInfo = require('./tools/stock')
exports.getFinancial = require('./tools/financial')
exports.getNspa = require('./tools/netSharePurchaseActivity')
exports.getCompany = require('./tools/companyData')
exports.random = require('./tools/numGen')